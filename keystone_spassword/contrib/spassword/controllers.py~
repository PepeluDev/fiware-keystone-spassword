import copy
import uuid

from keystone import config
from keystone.common import controller
from keystone.common import dependency
from keystone.common import extension
from keystone.common import wsgi
from keystone import exception
from keystone import identity
from keystone.identity.controllers import UserV3
from keystone_scim.contrib.scim.controllers import ScimUserV3Controller
from keystone_scim.contrib.scim import converter as conv
from keystone.openstack.common import log


CONF = config.CONF

LOG = log.getLogger(__name__)

class CheckPassword(object):

    def my_check_password(self, new_password):
        # Check password strengh
        try:
            import cracklib
            try:
                cracklib.VeryFascistCheck(new_password)
            except ValueError, msg:
                raise exception.ValidationError(target='user',
                    attribute='The password is too weak ({0})'.format(msg))
        except ImportError: # not used if not configured (dev environments)
            LOG.error('cracklib module is not properly configured, '
                        'weak password can be used when changing')


class PasswordScimUserV3Controller(ScimUserV3Controller, CheckPassword):

    def __init__(self):
        super(PasswordScimUserV3Controller, self).__init__()

    def patch_user(self, context, user_id, **kwargs):
        scim = self._denormalize(kwargs)
        user = conv.user_scim2key(scim)
        if 'password' in user:
            super(PasswordScimUserV3Controller, self).my_check_password(user['password'])

        # TODO: update_user_modification_time()
        return super(PasswordScimUserV3Controller, self).patch_user(context, user_id, **kwargs)
    
    def put_user(self, context, user_id, **kwargs):
        return self.patch_user(context, user_id, **kwargs)


class PasswordUserV3Controller(UserV3, CheckPassword):

    def __init__(self):
        super(PasswordUserV3Controller, self).__init__()

    def create_user(self, context, user):
        if 'password' in user:
            super(PasswordUserV3Controller, self).my_check_password(user['password'])            

        return super(PasswordUserV3Controller, self).create_user(context, user)        
